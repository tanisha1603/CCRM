package src.main;

import src.domain.*;
import src.service.*;
import src.io.ImportExportService;
import java.util.List;

/**
 * Test class to demonstrate all features
 */
public class TestApp {
    public static void main(String[] args) {
        System.out.println("=== TESTING CAMPUS COURSE RECORDS MANAGER ===\n");
        
        // Create services
        StudentService studentService = new StudentService();
        CourseService courseService = new CourseService();
        ImportExportService ioService = new ImportExportService(studentService, courseService);
        
        // Test 1: Create students using Builder pattern (conceptual)
        System.out.println("1. CREATING STUDENTS:");
        Student student1 = new Student("STU100", "2023100", "Test Student One", "test1@edu.in");
        Student student2 = new Student("STU101", "2023101", "Test Student Two", "test2@edu.in");
        
        studentService.save(student1);
        studentService.save(student2);
        System.out.println("Students created: " + studentService.getTotalStudentCount());
        
        // Test 2: Create courses using Builder pattern
        System.out.println("\n2. CREATING COURSES:");
        Course course1 = new Course.Builder("TEST101", "Test Course One")
            .credits(3)
            .department("TESTING")
            .semester(Semester.SPRING)
            .build();
            
        Course course2 = new Course.Builder("TEST102", "Test Course Two")
            .credits(4)
            .department("TESTING")
            .semester(Semester.FALL)
            .build();
            
        courseService.save(course1);
        courseService.save(course2);
        System.out.println("Courses created: " + courseService.findAll().size());
        
        // Test 3: Demonstrate Stream API
        System.out.println("\n3. STREAM API DEMONSTRATION:");
        System.out.println("Active students: " + studentService.getActiveStudents().size());
        System.out.println("Total credits offered: " + courseService.getTotalCreditsOffered());
        System.out.println("Average credits per course: " + courseService.getAverageCredits());
        
        // Test 4: Search functionality
        System.out.println("\n4. SEARCH FUNCTIONALITY:");
        List<Student> foundStudents = studentService.searchByName("Test");
        System.out.println("Students found with 'Test': " + foundStudents.size());
        
        // Test 5: Enum usage
        System.out.println("\n5. ENUM DEMONSTRATION:");
        System.out.println("Available semesters:");
        for (Semester semester : Semester.values()) {
            System.out.println("- " + semester.getDisplayName());
        }
        
        System.out.println("\nGrade points:");
        for (Grade grade : Grade.values()) {
            System.out.println("- " + grade.name() + ": " + grade.getPoints() + " points");
        }
        
        // Test 6: Polymorphism demonstration
        System.out.println("\n6. POLYMORPHISM DEMONSTRATION:");
        System.out.println("Student details: " + student1.getDetails());
        System.out.println("Course details: " + course1.toString());
        
        System.out.println("\n=== ALL TESTS COMPLETED SUCCESSFULLY ===");
    }
}
