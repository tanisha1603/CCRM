package src.domain;

import java.time.LocalDate;

/**
 * Abstract class representing a Person in the system.
 * Demonstrates ABSTRACTION and will be used for INHERITANCE.
 */
public abstract class Person {
    // Encapsulation: private fields with public getters/setters
    private String id;
    private String fullName;
    private String email;
    private LocalDate dateCreated;
    private boolean active;
    
    // Constructor - demonstrates constructor usage
    public Person(String id, String fullName, String email) {
        this.id = id;
        this.fullName = fullName;
        this.email = email;
        this.dateCreated = LocalDate.now(); // Java Time API
        this.active = true;
    }
    
    // Abstract method - forces subclasses to implement (ABSTRACTION)
    public abstract String getRole();
    
    // Concrete methods with implementation
    public String getDetails() {
        return String.format("ID: %s, Name: %s, Email: %s, Role: %s", 
                           id, fullName, email, getRole());
    }
    
    // Override toString() method (POLYMORPHISM)
    @Override
    public String toString() {
        return fullName + " (" + email + ")";
    }
    
    // ENCAPSULATION: Getters and setters
    public String getId() { return id; }
    
    public void setId(String id) { 
        if (id != null && !id.trim().isEmpty()) {
            this.id = id;
        }
    }
    
    public String getFullName() { return fullName; }
    
    public void setFullName(String fullName) { 
        if (fullName != null && !fullName.trim().isEmpty()) {
            this.fullName = fullName;
        }
    }
    
    public String getEmail() { return email; }
    
    public void setEmail(String email) { 
        if (email != null && email.contains("@")) {
            this.email = email;
        }
    }
    
    public LocalDate getDateCreated() { return dateCreated; }
    
    public boolean isActive() { return active; }
    
    public void setActive(boolean active) { this.active = active; }
    
    // Utility method
    public void deactivate() {
        this.active = false;
    }
}
